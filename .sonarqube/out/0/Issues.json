{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Compilador de Microsoft (R) Visual C#",
        "version": "4.0.0.0",
        "fileVersion": "4.0.1-1.21569.2 (52021b4b)",
        "semanticVersion": "4.0.0",
        "language": "es-ES"
      },
      "results": [
        {
          "ruleId": "S2933",
          "level": "warning",
          "message": "Make '_paymentMethods' 'readonly'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/Bus209/Documents/htdocs/eShopOnWeb/src/ApplicationCore/Entities/BuyerAggregate/Buyer.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 37,
                  "endLine": 12,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3925",
          "level": "warning",
          "message": "Update this implementation of 'ISerializable' to conform to the recommended serialization pattern.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/Bus209/Documents/htdocs/eShopOnWeb/src/ApplicationCore/Exceptions/BasketNotFoundException.cs",
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 41
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Users/Bus209/Documents/htdocs/eShopOnWeb/src/ApplicationCore/Exceptions/BasketNotFoundException.cs",
                "region": {
                  "startLine": 5,
                  "startColumn": 12,
                  "endLine": 5,
                  "endColumn": 17
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "0": "Add 'System.SerializableAttribute' attribute on 'BasketNotFoundException' because it implements 'ISerializable'."
            }
          }
        },
        {
          "ruleId": "S3246",
          "level": "warning",
          "message": "Add the 'out' keyword to parameter 'T' to make it 'covariant'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/Bus209/Documents/htdocs/eShopOnWeb/src/ApplicationCore/Interfaces/IIdentityParser.cs",
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 5,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1450",
          "level": "warning",
          "message": "Remove the '_uriComposer' field and declare it as a local variable in the relevant methods.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/Bus209/Documents/htdocs/eShopOnWeb/src/ApplicationCore/Services/BasketService.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 39,
                  "endLine": 15,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1450",
          "level": "warning",
          "message": "Remove the '_itemRepository' field and declare it as a local variable in the relevant methods.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/Bus209/Documents/htdocs/eShopOnWeb/src/ApplicationCore/Services/BasketService.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 51,
                  "endLine": 17,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "S1450": {
          "id": "S1450",
          "shortDescription": "Private fields only used as local variables in methods should become local variables",
          "fullDescription": "When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-1450",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope"
            ]
          }
        },
        "S2933": {
          "id": "S2933",
          "shortDescription": "Fields that are only assigned in the constructor should be \"readonly\"",
          "fullDescription": "readonly fields can only be assigned in a class constructor. If a class has a field that's not marked readonly but is only set in the constructor, it could cause confusion about the field's intended use. To avoid confusion, such fields should be marked readonly to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2933",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope",
              "TestSourceScope"
            ]
          }
        },
        "S3246": {
          "id": "S3246",
          "shortDescription": "Generic type parameters should be co/contravariant when possible",
          "fullDescription": "In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the out and in modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3246",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope"
            ]
          }
        },
        "S3925": {
          "id": "S3925",
          "shortDescription": "\"ISerializable\" should be implemented correctly",
          "fullDescription": "The ISerializable interface is the mechanism to control the type serialization process. If not implemented correctly this could result in an invalid serialization and hard to detect bugs.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3925",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope"
            ]
          }
        }
      }
    }
  ]
}